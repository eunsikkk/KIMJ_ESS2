%% 1. 기본 설정 및 날짜 폴더 자동 검출
clc; clear; close all;

baseDir    = 'G:\공유 드라이브\BSL_Data2\한전_김제ESS';
kimjFolder = '202106_KIMJ';
basePath   = fullfile(baseDir, kimjFolder);

% 폴더 내의 모든 폴더 목록 가져오기
allItems = dir(basePath);
folderNames = {allItems([allItems.isdir]).name};
% '.'와 '..' 제거
folderNames = folderNames(~ismember(folderNames, {'.', '..'}));

% 날짜 형식의 폴더만 선택 (예: '20210601'은 8자리 숫자)
isDateFolder = cellfun(@(x) ~isempty(regexp(x, '^\d{8}$', 'once')), folderNames);
dateFolders = folderNames(isDateFolder);

% 날짜 폴더들을 오름차순으로 정렬
dateFolders = sort(dateFolders);

%% 2. 원하는 기간(YYYYMMDD) 선택
weekStart = '20210601';
weekEnd   = '20210601';

% 문자열 -> 숫자 변환 후 범위 비교
weekFolders = dateFolders(cellfun(@(x) (str2double(x) >= str2double(weekStart)) && ...
                                       (str2double(x) <= str2double(weekEnd)), dateFolders));

fprintf('선택된 주간 폴더:\n');
disp(weekFolders);

%헤더 지정
n_hd = 4;

% 여러 날짜의 파일을 모두 합칠 전체 테이블
allData = table();

%% 3. 선택된 주간 폴더를 순회하며 파일 읽기
for i = 1:length(weekFolders)
    currDate = weekFolders{i};   % 예: '20210601'
    
    % 실제 파일 경로 만들기: basePath\20210601\20210601_LGCHEM_RARD.csv
    fullFilePath = fullfile(basePath, currDate, sprintf('%s_LGCHEM_RARD.csv', currDate));

    % 파일이 존재하는지 확인
    if ~exist(fullFilePath, 'file')
        warning('파일이 존재하지 않습니다: %s', fullFilePath);
        continue;
    end

    % readtable로 데이터 읽기
    T = readtable(fullFilePath, 'FileType', 'text', ...
        'NumHeaderLines', n_hd, ...    % 1~4행 건너뛰고, 5번째 행을 변수명으로 사용
        'ReadVariableNames', true, ...
        'PreserveVariableNames', true);

    % 여러 날짜 데이터를 한 테이블로 합치기
    allData = [allData; T]; %#ok<AGROW>
end

%% 4. 유효 데이터 확인 및 시간 변환
if isempty(allData)
    error('선택한 기간(%s~%s)에 해당하는 유효 데이터가 없습니다.', weekStart, weekEnd);
end

% CSV 파일에 맞게 Time 열을 datetime으로 변환 (InputFormat은 실제 CSV 포맷에 맞게 수정)
try
    allData.Time = datetime(allData.Time, 'InputFormat', 'yyyy-MM-dd HH:mm:ss');
catch
    warning('Time 열의 datetime 변환에 실패했습니다. CSV 포맷을 확인하세요.');
end

% 'Rack No.' 컬럼에서 중복 없이 랙 번호 목록 얻기
uniqueRacks = unique(allData.("Rack No."));

%% 5. 랙 번호와 셀 번호 입력 (다중 입력 허용)
% 5-1. 랙 번호 입력 (예: [1 2])
selectedRacks = input('플롯할 랙 번호들을 입력하세요 (예: [1 2]): ');
if isempty(selectedRacks) || ~isnumeric(selectedRacks)
    error('올바른 숫자 배열을 입력하세요.');
end

% 입력한 각 랙 번호가 데이터에 존재하는지 확인
for r = selectedRacks
    if ~ismember(r, uniqueRacks)
        error('입력한 랙 번호 (%d)가 데이터에 존재하지 않습니다.', r);
    end
end

% 5-2. 셀 번호 입력 (예: [1 3 5])
selectedCells = input('플롯할 셀 번호들을 입력하세요 (예: [1 3 5]): ');
if isempty(selectedCells) || ~isnumeric(selectedCells)
    error('올바른 숫자 배열을 입력하세요.');
end
for c = selectedCells
    if c < 1 || c > 14
        error('셀 번호는 1에서 14 사이여야 합니다.');
    end
end

%% 6. 선택된 랙들과 셀들의 데이터 플롯 생성
for i = 1:length(selectedRacks)
    rackNumber = selectedRacks(i);
    % 해당 랙의 데이터만 추출
    idxRack = (allData.("Rack No.") == rackNumber);
    T_thisRack = allData(idxRack, :);
    
    for j = 1:length(selectedCells)
        cellNumber = selectedCells(j);
        cellStr = sprintf('%02d', cellNumber);
        varName = ['Cell#' cellStr '(V)'];
        
        figure('Name', sprintf('Rack %d - Cell %s', rackNumber, cellStr));
        if ismember(varName, T_thisRack.Properties.VariableNames)
            plot(T_thisRack.Time, T_thisRack.(varName), 'LineWidth', 1.5);
            xlabel('Time');
            ylabel(varName);
            title(sprintf('[Rack %d] Time vs %s', rackNumber, varName), 'Interpreter','none');
            grid on;
        else
            warning('Rack %d에는 변수 %s가 존재하지 않습니다.', rackNumber, varName);
        end
    end
end
