clc; clear; close all

%% 1. 기본 경로 및 날짜 폴더 설정
baseDir    = 'G:\공유 드라이브\BSL_Data2\한전_김제ESS';
kimjFolder = '202306_KIMJ';
basePath   = fullfile(baseDir, kimjFolder);

allItems    = dir(basePath);
folderNames = {allItems([allItems.isdir]).name};

% 날짜 형식의 폴더만 선택 (예: '20210615' 형식)
isDateFolder = cellfun(@(x) ~isempty(regexp(x, '^\d{8}$', 'once')), folderNames);
dateFolders  = sort(folderNames(isDateFolder));

%% 2. 원하는 기간 선택 (예: 20220601 ~ 20220601)
weekStart = '20230601';
weekEnd   = '20230630';

weekFolders = dateFolders(cellfun(@(x) (str2double(x) >= str2double(weekStart)) && ...
                                       (str2double(x) <= str2double(weekEnd)), dateFolders));
fprintf('선택된 기간 폴더:\n');
disp(weekFolders);

% 수정된 파일 패턴 템플릿
% 기존: '%s_LGCHEM_RBMS*.csv'
% 새로운 패턴: 'JXR_BSC_Rack*_20220601*.csv'
% 여기서 '*'는 Rack 번호와 추가 번호(_1, _2 등)를 대체합니다.
filePatternTemplate = 'JXR_BSC_Rack*_*.csv';
n_hd = 11; % 헤더 라인 수 (필요에 따라 조정)

%% 3. 여러 날짜 폴더의 모든 파일 데이터를 하나의 테이블(allData)에 누적
allData = table();
for i = 1:length(weekFolders)
    currDate   = weekFolders{i};  
    data_folder = fullfile(baseDir, kimjFolder, currDate);
    
    % 날짜를 포함한 파일 패턴 생성
    % 예: 'JXR_BSC_Rack1_20220601*.csv'
    filePattern = fullfile(data_folder, sprintf('JXR_BSC_Rack*_%s*.csv', currDate));
    fileList    = dir(filePattern);
    
    for j = 1:length(fileList)
        fullFilePath = fullfile(fileList(j).folder, fileList(j).name);
        
        % readtable 옵션 수정
        % 'NumHeaderLines' 대신 'HeaderLines' 사용
        % 'FileType'은 'text'가 기본값이므로 생략 가능
        try
            T = readtable(fullFilePath, ...
                'HeaderLines', n_hd, ...
                'ReadVariableNames', true, ...
                'PreserveVariableNames', true);
            allData = [allData; T];  
        catch ME
            warning('파일을 읽는 중 오류 발생: %s\n오류 메시지: %s', fullFilePath, ME.message);
        end
    end
end

%% 4. 데이터가 정상적으로 로드되었는지 확인
if isempty(allData)
    error('선택된 기간 동안 데이터가 없습니다.');
end

%% 5. PLOT

% 'Average C.V.(V)'의 평균값을 시간별로 계산
T_avgCV = groupsummary(allData, 'Time', 'mean', 'Average C.V.(V)');
allVars = T_avgCV.Properties.VariableNames;
idx = find(contains(allVars, 'mean_Average'), 1);
if isempty(idx)
    error('Average C.V.(V)의 평균 변수를 찾을 수 없습니다.');
end
cvMeanVar = allVars{idx};

% 'SOC(%)'의 평균값을 시간별로 계산
T_avgSOC = groupsummary(allData, 'Time', 'mean', 'SOC(%)');
allVars = T_avgSOC.Properties.VariableNames;
idx_soc = find(contains(allVars, 'mean_SOC'), 1);
if isempty(idx_soc)
    error('SOC(%)의 평균 변수를 찾을 수 없습니다.');
end
socMeanVar = allVars{idx_soc};

% 'Temp.(oC)'의 평균값을 시간별로 계산
T_avgTemp = groupsummary(allData, 'Time', 'mean', 'Average M.T.(oC)');
allVars = T_avgTemp.Properties.VariableNames;
idx_temp = find(contains(allVars, 'mean_Average M.T.(oC)'), 1);
if isempty(idx_temp)
    error('Temp(oC)의 평균 변수를 찾을 수 없습니다.');
end
tempMeanVar = allVars{idx_temp};


% Average C.V.(V) 플롯
figure;
plot(T_avgCV.Time, T_avgCV.(cvMeanVar), 'LineWidth', 1.5,'Color','[0.3010, 0.7450, 0.9330]');
xlabel('Time');
ylabel('Average C.V.(V)');
ylim([0 4])
title(sprintf('Average C.V.(V) (For %s to %s)', weekFolders{1}, weekFolders{end}));
grid on;

% Average SOC(%) 플롯
figure;
plot(T_avgSOC.Time, T_avgSOC.(socMeanVar), 'LineWidth', 1.5,'Color','[0.3010, 0.7450, 0.9330]');
xlabel('Time');
ylim([0 90])
ylabel('Average SOC (%)');
title(sprintf('Average SOC(%%) (For %s to %s)', weekFolders{1}, weekFolders{end}));
grid on;

% Average M.T. (oC) 플롯
figure;
plot(T_avgTemp.Time, T_avgTemp.(tempMeanVar), 'LineWidth', 1.5,'Color','[0.3010, 0.7450, 0.9330]');
xlabel('Time');
ylabel('Average Temperature (oC)');
ylim([0 30])
title(sprintf('Average Temperature(oC) (For %s to %s)', weekFolders{1}, weekFolders{end}));
grid on;
